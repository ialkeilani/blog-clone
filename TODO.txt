TASKS:
- add support for users signup



- try logging in with an inactive user

look at http codes:
    https://auth.yncu.com/doLogin?null
    https://auth.yncu.com/InvalidSession

study the "ModelForm.save()" method:
    class UserForm(forms.ModelForm):

        def save(self, commit=True):





Qs:
models.OneToOneField(classModel) vs models.ForeignKey("ClassModel")


Completed:
- code "login_url" of "Post<Create/Update>" class view to dynamically track the login url with the get parameter "next=post/<create/update>".  NOT NEEDED.  ALREADY AVAIALBE AS DEFAULT BEHAVIOR
- figure out the DTL variable name "post", how does it come through the DetailView? read more on the DetailView django documentation
- try to access a post detail page while not logged in. you should see approved comments only
- convert function view to class-based CreateView:
    add_comment_to_post
- try meta ordering on your post model IT SEEMS TO BE APPLIED AFTER QUERYSET
    class Meta:
        ordering = ["-<fieldname>"]
- make app name dynamic in template files (pass it in a context dict as "app_name")
- add support for users signup
    - except for superusers, each user sees their own drafts only
    - other than superusuer, each user can only publish their posts
    - normal user can delete their posts only, while super user can delete everybody
    - comments authros should be resitered users
    - comments should not be visible except after approved
    - only super user can approve comments
    - responseforbidden
    - "valid_form()" can use "self.request"
    - no comments are allwed for draft posts, except for superuser, or if commentator is the post author
    - register should be available if not logged in
    - after registering, user should be automatically logged it
    - try to register same user twice before loging in
    - add "user" field and make it disabled on forms





workflow:
    user support
        - create model form
            class CustomUserCreationForm(UserCreationForm):
                class Meta(UserCreationForm.Meta):
                    model = User
                    fields = UserCreationForm.Meta.fields + ('email', 'first_name', 'last_name')

                def __init__(self, *args, **kwargs):
                    super().__init__(*args, **kwargs)
                    self.fields['email'].help_text = 'Optional'
                    self.fields['first_name'].help_text = 'Optional'
                    self.fields['last_name'].help_text = 'Optional'

        - add CreateView

        - add url pattern for login in the project's urls.py
            from django.contrib.auth.views import LoginView, LogoutView

            path('login/', LoginView.as_view(redirect_authenticated_user=True), name='login'),
            path('logout/', LogoutView.as_view(), name='logout'),

        - add url pattern for registration in the app's urls.py (for the CreateView)

        - create login/registration templates (example location: app_name/templates/registration/<login.html> | <registration.html>